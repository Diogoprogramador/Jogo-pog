import tkinter as tk
import random

# Configurações do jogo
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
PADDLE_WIDTH = 20
PADDLE_HEIGHT = 100
BALL_SIZE = 20
PADDLE_SPEED = 60
BALL_SPEED = 8

class PongGame:
    def __init__(self, master):
        self.master = master
        self.master.title("Jogo Pong - Tkinter")
        self.master.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        self.master.resizable(False, False)

        self.canvas = tk.Canvas(master, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg="black")
        self.canvas.pack()

        # Inicializa as raquetes e a bola
        self.paddle1 = self.canvas.create_rectangle(50, WINDOW_HEIGHT//2 - PADDLE_HEIGHT//2,
                                                    50 + PADDLE_WIDTH, WINDOW_HEIGHT//2 + PADDLE_HEIGHT//2,
                                                    fill="red")
        self.paddle2 = self.canvas.create_rectangle(WINDOW_WIDTH - 50 - PADDLE_WIDTH, WINDOW_HEIGHT//2 - PADDLE_HEIGHT//2,
                                                    WINDOW_WIDTH - 50, WINDOW_HEIGHT//2 + PADDLE_HEIGHT//2,
                                                    fill="green")
        self.ball = self.canvas.create_oval(WINDOW_WIDTH//2 - BALL_SIZE//2, WINDOW_HEIGHT//2 - BALL_SIZE//2,
                                            WINDOW_WIDTH//2 + BALL_SIZE//2, WINDOW_HEIGHT//2 + BALL_SIZE//2,
                                            fill="blue")

        # Inicializa a posição e direção da bola
        self.ball_dx = BALL_SPEED * random.choice([-1, 1])
        self.ball_dy = BALL_SPEED * random.choice([-1, 1])
        self.ball_speedup = 1.1  # Fator de aumento de velocidade da bola ao rebater

        # Contadores de pontuação
        self.score1 = 0
        self.score2 = 0
        self.score_display = self.canvas.create_text(WINDOW_WIDTH//2, 50, text=f"{self.score1}   {self.score2}", fill="white", font=("Arial", 40))

        # Controle de teclado
        self.master.bind("<KeyPress>", self.on_key_press)
        self.master.bind("<KeyRelease>", self.on_key_release)

        self.canvas.focus_set()

        # Loop principal do jogo
        self.game_loop()

    def game_loop(self):
        # Movimento da bola
        self.canvas.move(self.ball, self.ball_dx, self.ball_dy)

        # Verifica colisões com as bordas superior e inferior
        ball_coords = self.canvas.coords(self.ball)
        if ball_coords[1] <= 0 or ball_coords[3] >= WINDOW_HEIGHT:
            self.ball_dy *= -1

        # Verifica colisões com as raquetes
        if self.is_collision(self.ball, self.paddle1) or self.is_collision(self.ball, self.paddle2):
            self.ball_dx *= -1
            self.ball_dx *= self.ball_speedup
            self.ball_dy *= self.ball_speedup

        # Verifica se a bola passou pelas raquetes
        if ball_coords[0] <= 0:
            self.score("right")
        elif ball_coords[2] >= WINDOW_WIDTH:
            self.score("left")

        # Atualiza a tela
        self.master.after(30, self.game_loop)

    def on_key_press(self, event):
        # Movimento das raquetes
        if event.keysym == "w":
            self.move_paddle(self.paddle1, -PADDLE_SPEED)
        elif event.keysym == "s":
            self.move_paddle(self.paddle1, PADDLE_SPEED)
        elif event.keysym == "Up":
            self.move_paddle(self.paddle2, -PADDLE_SPEED)
        elif event.keysym == "Down":
            self.move_paddle(self.paddle2, PADDLE_SPEED)

    def on_key_release(self, event):
        pass

    def move_paddle(self, paddle, dy):
        # Movimento das raquetes dentro dos limites da tela
        paddle_coords = self.canvas.coords(paddle)
        if paddle_coords[1] + dy >= 0 and paddle_coords[3] + dy <= WINDOW_HEIGHT:
            self.canvas.move(paddle, 0, dy)

    def is_collision(self, obj1, obj2):
        # Verifica colisões entre dois objetos
        obj1_coords = self.canvas.coords(obj1)
        obj2_coords = self.canvas.coords(obj2)
        if (obj1_coords[2] >= obj2_coords[0] and obj1_coords[0] <= obj2_coords[2] and
            obj1_coords[3] >= obj2_coords[1] and obj1_coords[1] <= obj2_coords[3]):
            return True
        return False

    def score(self, direction):
        # Atualiza a pontuação e reseta a posição da bola
        if direction == "left":
            self.score1 += 1
            self.canvas.itemconfig(self.score_display, text=f"{self.score1}   {self.score2}")
        elif direction == "right":
            self.score2 += 1
            self.canvas.itemconfig(self.score_display, text=f"{self.score1}   {self.score2}")

        self.canvas.coords(self.ball, WINDOW_WIDTH//2 - BALL_SIZE//2, WINDOW_HEIGHT//2 - BALL_SIZE//2,
                           WINDOW_WIDTH//2 + BALL_SIZE//2, WINDOW_HEIGHT//2 + BALL_SIZE//2)
        self.ball_dx = BALL_SPEED * random.choice([-1, 1])
        self.ball_dy = BALL_SPEED * random.choice([-1, 1])

def main():
    root = tk.Tk()
    game = PongGame(root)
    root.mainloop()

if __name__ == "__main__":
    main()
